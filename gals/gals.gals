#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
ScannerCaseSensitive = true
ScannerTable = Full
Input = Stream
Parser = SLR
#RegularDefinitions
L  : [A-Za-z]
D  : [0-9]
WS  : [\ \t\n\r]
COMMENT  : "(*" [^ "*" ]* "*)"
#Tokens
//simbolos especiais
","
";"
"."
":"
":="
"("
")"
"*"
"/"
"-"
"+"
"<"
">"
"<="
">="
"<>"
"="

//tokens
id :  {L} ( {L} | {D} | _ )*
inteiro : {D}+
literal : "*"

//palavras reservadas
and = id : "and"
begin = id : "begin"
call = id : "call"
case = id : "case"
const = id : "const"
do = id : "do"
else = id : "else"
end = id : "end"
for = id : "for"
if = id : "if"
integer = id : "integer"
not = id : "not"
of = id : "of"
or = id : "or"
procedure = id : "procedure"
program = id : "program"
readln = id : "readln"
repeat = id : "repeat"
then = id : "then"
to = id : "to"
until = id : "until"
var = id : "var"
while = id : "while"
writeln = id : "writeln"

//ignorar espaços em branco, caracteres especiais e comentários
 : {WS}*
 :! {COMMENT}
#NonTerminals
<PROGRAMA>
<BLOCO>
<LID>
<REPID>
<DCLCONST>
<LDCONST>
<DCLVAR>
<LDVAR>
<TIPO>
<DCLPROC>
<DEFPAR>
<CORPO>
<REPCOMANDO>
<COMANDO>
<PARAMETROS>
<REPPAR>
<ELSEPARTE>
<VARIAVEL>
<REPVARIAVEL>
<ITEMSAIDA>
<REPITEM>
<EXPRESSAO>
<REPEXPSIMP>
<EXPSIMP>
<REPEXP>
<TERMO>
<REPTERMO>
<FATOR>
<CONDCASE>
<CONTCASE>
<RPINTEIRO>
#Grammar
<PROGRAMA> ::= program id ";" <BLOCO> "." ;
<BLOCO> ::= <DCLCONST> <DCLVAR> <DCLPROC> <CORPO> ;
<LID> ::= id <REPID> ;
<REPID> ::= î ;
<REPID> ::= "," id <REPID> ;
<DCLCONST> ::= const id "=" inteiro ";" <LDCONST> ;
<LDCONST> ::= î ;
<LDCONST> ::= id "=" inteiro ";" <LDCONST> ;
<DCLCONST> ::= î ;
<DCLVAR> ::= var <LID> ":" <TIPO> ";" <LDVAR> ;
<LDVAR> ::= î ;
<LDVAR> ::= <LID> ":" <TIPO> ";" <LDVAR> ;
<DCLVAR> ::= î ;
<TIPO> ::= integer ;
<DCLPROC> ::= procedure id <DEFPAR> ";" <BLOCO> ";" <DCLPROC> ;
<DCLPROC> ::= î;
<DEFPAR> ::= î ;
<DEFPAR> ::= "(" <LID> ":" integer ")" ;
<CORPO> ::= begin <COMANDO> <REPCOMANDO> end ;
<REPCOMANDO> ::= î ;
<REPCOMANDO> ::= ";" <COMANDO> <REPCOMANDO> ;
<COMANDO> ::= id ":=" <EXPRESSAO> ;
<COMANDO> ::= <CORPO> ;
<COMANDO> ::= î ;
<COMANDO> ::= call id <PARAMETROS> ;
<PARAMETROS> ::= î;
<PARAMETROS> ::= "(" <EXPRESSAO> <REPPAR> ")" ;
<REPPAR> ::= î ;
<REPPAR> ::= "," <EXPRESSAO> <REPPAR> ;
<COMANDO> ::= if <EXPRESSAO> then <COMANDO> <ELSEPARTE> ;
<ELSEPARTE> ::= î ;
<ELSEPARTE> ::=  else <COMANDO> ;
<COMANDO> ::= while <EXPRESSAO> do <COMANDO> ;
<COMANDO> ::= repeat <COMANDO> until <EXPRESSAO> ;
<COMANDO> ::= readln "(" <VARIAVEL> <REPVARIAVEL> ")" ;
<VARIAVEL> ::= id ;
<REPVARIAVEL>::= î ;
<REPVARIAVEL>::= "," <VARIAVEL> <REPVARIAVEL> ;
<COMANDO> ::= writeln "(" <ITEMSAIDA> <REPITEM> ")" ;
<ITEMSAIDA> ::= literal ;
<ITEMSAIDA> ::= <EXPRESSAO> ;
<REPITEM> ::= î ;
<REPITEM> ::= "," <ITEMSAIDA> <REPITEM> ;
<COMANDO> ::= case <EXPRESSAO> of <CONDCASE> end ;
<CONDCASE> ::= inteiro <RPINTEIRO> ":" <COMANDO> <CONTCASE> ;
<RPINTEIRO> ::= "," inteiro <RPINTEIRO> ;
<RPINTEIRO> ::= î ;
<CONTCASE> ::= î ;
<CONTCASE> ::= ";" <CONDCASE> ;
<COMANDO> ::= for id ":=" <EXPRESSAO> to <EXPRESSAO> do <COMANDO> ;
<EXPRESSAO> ::= <EXPSIMP> <REPEXPSIMP> ;
<REPEXPSIMP> ::= î ;
<REPEXPSIMP> ::= "=" <EXPSIMP> ;
<REPEXPSIMP> ::= "<" <EXPSIMP> ;
<REPEXPSIMP> ::= ">" <EXPSIMP> ;
<REPEXPSIMP> ::= ">=" <EXPSIMP> ;
<REPEXPSIMP> ::= "<=" <EXPSIMP> ;
<REPEXPSIMP> ::= "<>" <EXPSIMP> ;
<EXPSIMP> ::= "+" <TERMO> <REPEXP> ;
<EXPSIMP> ::= "-" <TERMO> <REPEXP> ;
<EXPSIMP> ::= <TERMO> <REPEXP> ;
<REPEXP> ::= "+" <TERMO> <REPEXP> ;
<REPEXP> ::= "-" <TERMO> <REPEXP> ;
<REPEXP> ::= or <TERMO> <REPEXP> ;
<REPEXP> ::= î ;
<TERMO> ::= <FATOR> <REPTERMO> ;
<REPTERMO> ::= î ;
<REPTERMO> ::= "*" <FATOR> <REPTERMO> ;
<REPTERMO> ::= "/" <FATOR> <REPTERMO> ;
<REPTERMO> ::= and <FATOR> <REPTERMO> ;
<FATOR> ::= inteiro ;
<FATOR> ::= "(" <EXPRESSAO> ")" ;
<FATOR> ::= not <FATOR> ;
<FATOR> ::= <VARIAVEL> ;
